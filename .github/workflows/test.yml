name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: |
        export DATABASE_URL="file:./test-ci.db"
        npx prisma generate

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npx tsc --noEmit

    - name: Run API Tests
      run: NODE_ENV=test npm run test:api
      env:
        NODE_ENV: test

    - name: Run Component Tests
      run: npm run test:components

    - name: Run Integration Tests
      run: npm run test:integration

    - name: Generate Coverage Report
      run: npm run test:coverage

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: |
        export DATABASE_URL="file:./test-build.db"
        npx prisma generate

    - name: Build application
      run: npm run build

    - name: Check build artifacts
      run: |
        if [ ! -d ".next" ]; then
          echo "Build failed - .next directory not found"
          exit 1
        fi
        echo "Build successful - .next directory created"

  # Database Migration Test (Optional)
  database-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Test Database Schema
      run: |
        # Set DATABASE_URL for all Prisma commands
        export DATABASE_URL="file:./test-migration.db"

        # Test that Prisma schema is valid
        npx prisma validate

        # Test database migrations (using SQLite for CI)
        # Provide consent for AI safety warning
        export PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION="I consent to run this dangerous database operation in CI/CD"
        npx prisma db push --force-reset

        # Verify database creation - check multiple possible locations
        echo "Checking for database file..."
        ls -la *.db 2>/dev/null || echo "No .db files found in current directory"
        find . -name "test-migration.db" -type f 2>/dev/null || echo "Database file not found with find"

        # More robust database verification
        if npx prisma db pull --force 2>/dev/null; then
          echo "✅ Database migration test passed - schema successfully synchronized"
        else
          echo "❌ Database migration test failed - could not verify schema"
          exit 1
        fi

  # Security and Quality Checks
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Security Audit
      run: npm audit --audit-level=moderate

    - name: Check for outdated dependencies
      run: npm outdated || true

    # Optional: Add additional security tools
    # - name: Run Snyk Security Test
    #   run: npx snyk test
    #   env:
    #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Performance Testing (Optional)
  performance:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: |
        export DATABASE_URL="file:./test-perf.db"
        npx prisma generate

    - name: Build application
      run: npm run build

    - name: Start application in background
      run: |
        npm start &
        sleep 30  # Wait for application to start
      env:
        NODE_ENV: production
        DATABASE_URL: "file:./prod-test.db"

    - name: Run basic performance test
      run: |
        # Basic health check
        curl -f http://localhost:3000/api/health || exit 1
        
        # Test API response times (basic)
        echo "Testing API performance..."
        time curl -f http://localhost:3000/api/venues
        time curl -f http://localhost:3000/api/vendors

    - name: Stop application
      run: pkill -f "tsx server.ts" || true

# Notification on failure (Optional)
  notify:
    runs-on: ubuntu-latest
    needs: [test, build, database-test, security]
    if: failure()
    
    steps:
    - name: Notify on failure
      run: |
        echo "Tests failed for commit ${{ github.sha }}"
        echo "Branch: ${{ github.ref }}"
        echo "Author: ${{ github.actor }}"
        # Add notification logic here (Slack, Discord, etc.)

# Success notification
  success:
    runs-on: ubuntu-latest
    needs: [test, build, database-test, security]
    if: success()
    
    steps:
    - name: Success message
      run: |
        echo "All tests passed for commit ${{ github.sha }}"
        echo "Ready for deployment!"
